QUES 1 [GUESS NUMBER HIGHER OR LOWER]


public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int num = 1;
        int pick = n;

        while(num<=pick) {
            int mid = num+(pick-num) /2;
            int result = guess(mid);

            if (result == 0) {
                return mid;
            } else if(result<0) {
                pick = mid -1;
            }else {
                num = mid +1;
            }
        }
        return -1;
        
        
    }
}

QUES 2 [Find First and Last Position of Element in Sorted Array]

class Solution {
  public int[] searchRange(int[] nums, int target) {
    final int l = firstGreaterEqual(nums, target);
    if (l == nums.length || nums[l] != target)
      return new int[] {-1, -1};
    final int r = firstGreaterEqual(nums, target + 1) - 1;
    return new int[] {l, r};
  }

  private int firstGreaterEqual(int[] arr, int target) {
    int l = 0;
    int r = arr.length;
    while (l < r) {
      final int m = (l + r) / 2;
      if (arr[m] >= target)
        r = m;
      else
        l = m + 1;
    }
    return l;
  }
}

QUES 3 [Peak Indes in Mountail Array]

public class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int low = 0;
        int high = arr.length - 1;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] < arr[mid + 1]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}


QUES 4 [Search in Rotated Sorted Array]

class Solution {
  public int search(int[] nums, int target) {
    int l = 0;
    int r = nums.length - 1;

    while (l <= r) {
      final int m = (l + r) / 2;
      if (nums[m] == target)
        return m;
      if (nums[l] <= nums[m]) {
        if (nums[l] <= target && target < nums[m])
          r = m - 1;
        else
          l = m + 1;
      } else { 
        if (nums[m] < target && target <= nums[r])
          l = m + 1;
        else
          r = m - 1;
      }
    }

    return -1;
  }
}

QUES 5 [SEARCH INSERT POSITION]

class Solution {
  public int searchInsert(int[] nums, int target) {
    int l = 0;
    int r = nums.length;

    while (l < r) {
      final int m = (l + r) / 2;
      if (nums[m] == target)
        return m;
      if (nums[m] < target)
        l = m + 1;
      else
        r = m;
    }

    return l;
  }
}

QUES 6 [SINGLE ELEMENT IN A SORTED ARRAY]

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int low = 0;
        int high = nums.length -1;

        while(low<high) {
            int mid = low + (high - low) / 2;

            if(mid%2 == 1){
                mid--;
            }

            if(nums[mid] == nums[mid+1]) {
                low = mid+2;
            } else {
                high = mid;
            }
            
        }
        return nums[low];
    }
}

QUES 7 [SEARCH IN ROTATED SORTED ARRAY II ]

class Solution {
  public boolean search(int[] nums, int target) {
    int l = 0;
    int r = nums.length - 1;

    while (l <= r) {
      final int m = (l + r) / 2;
      if (nums[m] == target)
        return true;
      if (nums[l] == nums[m] && nums[m] == nums[r]) {
        ++l;
        --r;
      } else if (nums[l] <= nums[m]) { // nums[l..m] are sorted
        if (nums[l] <= target && target < nums[m])
          r = m - 1;
        else
          l = m + 1;
      } else { // nums[m..n - 1] are sorted
        if (nums[m] < target && target <= nums[r])
          l = m + 1;
        else
          r = m - 1;
      }
    }

    return false;
  }
}


QUES 8 [FIND MINIMUM IN ROTATED SORTED ARRAY]

public class Solution {
    public int findMin(int[] nums) {
        int low = 0;
        int high = nums.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] > nums[high]) {
                low = mid+1;
            } else {
                high =mid;
            }
        }

        return nums[low];
    }
}

QUES 9 [FIND THE DUPLICATE NUMBER]

class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];

        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);

        slow = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
        
    }
}

QUES 10 [SEARCH A 2D MATRIX]

class Solution {
  public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix.length == 0)
      return false;

    final int m = matrix.length;
    final int n = matrix[0].length;
    int l = 0;
    int r = m * n;

    while (l < r) {
      final int mid = (l + r) / 2;
      final int i = mid / n;
      final int j = mid % n;
      if (matrix[i][j] == target)
        return true;
      if (matrix[i][j] < target)
        l = mid + 1;
      else
        r = mid;
    }

    return false;
  }
}

QUES 11 [FIND PEAK ELEMENT]

class Solution {
    public int findPeakElement(int[] nums) {
        int low = 0;
        int high = nums.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] < nums[mid + 1]) {
                low = mid+1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}

QUES 12 [FIND PEAK ELEMENT II]

class Solution {
    public int[] findPeakGrid(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        int low = 0, high = m - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;
            int maxCol = 0;
            for (int j = 1; j < n; ++j) {
                if (mat[mid][j] > mat[mid][maxCol]) {
                    maxCol = j;
                }
            }

            if (mat[mid][maxCol] < mat[mid + 1][maxCol]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        int row = low;
        int maxCol = 0;
        for (int j = 1; j < n; ++j) {
            if (mat[row][j] > mat[row][maxCol]) {
                maxCol = j;
            }
        }
        return new int[] { row, maxCol };


    }
}
